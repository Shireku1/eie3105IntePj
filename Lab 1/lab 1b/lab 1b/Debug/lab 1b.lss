
lab 1b.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000122  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ce  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000122  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000154  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000194  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006b9  00000000  00000000  000001b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000610  00000000  00000000  0000086d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000023a  00000000  00000000  00000e7d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  000010b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000341  00000000  00000000  000010dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000b1  00000000  00000000  0000141d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000014ce  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

#include <avr/io.h>

int main(void)
{
    DDRD=0xff;
  80:	8f ef       	ldi	r24, 0xFF	; 255
  82:	8a b9       	out	0x0a, r24	; 10
	DDRB=0x00;
  84:	14 b8       	out	0x04, r1	; 4

	int bs =0;
  86:	40 e0       	ldi	r20, 0x00	; 0
  88:	50 e0       	ldi	r21, 0x00	; 0
    while (1) 
    {
		if ((PINB&(1<<0)) != 0)			//change state
		{
		
		if (bs==1)
  8a:	e1 e0       	ldi	r30, 0x01	; 1
  8c:	70 e0       	ldi	r23, 0x00	; 0

		}

		if (bs==1)						//output according state
		{
			PORTD=0xff;
  8e:	6f ef       	ldi	r22, 0xFF	; 255

	int bs =0;

    while (1) 
    {
		if ((PINB&(1<<0)) != 0)			//change state
  90:	18 9b       	sbis	0x03, 0	; 3
  92:	07 c0       	rjmp	.+14     	; 0xa2 <main+0x22>
		{
		
		if (bs==1)
  94:	8e 2f       	mov	r24, r30
  96:	41 30       	cpi	r20, 0x01	; 1
  98:	51 05       	cpc	r21, r1
  9a:	09 f4       	brne	.+2      	; 0x9e <main+0x1e>
  9c:	87 2f       	mov	r24, r23
		{bs=0;} 
  9e:	48 2f       	mov	r20, r24
  a0:	50 e0       	ldi	r21, 0x00	; 0
		else
		{bs=1;}

		}

		if (bs==1)						//output according state
  a2:	41 30       	cpi	r20, 0x01	; 1
  a4:	51 05       	cpc	r21, r1
  a6:	11 f4       	brne	.+4      	; 0xac <main+0x2c>
		{
			PORTD=0xff;
  a8:	6b b9       	out	0x0b, r22	; 11
  aa:	04 c0       	rjmp	.+8      	; 0xb4 <main+0x34>
		}

		if (bs==0)
  ac:	41 15       	cp	r20, r1
  ae:	51 05       	cpc	r21, r1
  b0:	09 f4       	brne	.+2      	; 0xb4 <main+0x34>
		{
			PORTD=0x00;
  b2:	1b b8       	out	0x0b, r1	; 11
int main(void)
{
    DDRD=0xff;
	DDRB=0x00;

	int bs =0;
  b4:	28 ee       	ldi	r18, 0xE8	; 232
  b6:	33 e0       	ldi	r19, 0x03	; 3
  b8:	05 c0       	rjmp	.+10     	; 0xc4 <main+0x44>
  ba:	01 97       	sbiw	r24, 0x01	; 1
			PORTD=0x00;
		}


		for (int i=0; i<1000; i++)		//cool down
		{for (int j=0; j<1000; j++);}
  bc:	f1 f7       	brne	.-4      	; 0xba <main+0x3a>
  be:	21 50       	subi	r18, 0x01	; 1
  c0:	31 09       	sbc	r19, r1
		{
			PORTD=0x00;
		}


		for (int i=0; i<1000; i++)		//cool down
  c2:	31 f3       	breq	.-52     	; 0x90 <main+0x10>
int main(void)
{
    DDRD=0xff;
	DDRB=0x00;

	int bs =0;
  c4:	88 ee       	ldi	r24, 0xE8	; 232
  c6:	93 e0       	ldi	r25, 0x03	; 3
  c8:	f8 cf       	rjmp	.-16     	; 0xba <main+0x3a>

000000ca <_exit>:
  ca:	f8 94       	cli

000000cc <__stop_program>:
  cc:	ff cf       	rjmp	.-2      	; 0xcc <__stop_program>
